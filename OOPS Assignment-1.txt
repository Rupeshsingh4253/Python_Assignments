Que 1:
        A class is a blueprint or a template for creating objects. It defines the structure and behavior of objects that belong to it.
        
        class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.speed = 0

    def accelerate(self):
        self.speed += 10

    def brake(self):
        self.speed -= 10

    
    An object is an instance of a class. It is a concrete realization of the blueprint defined by the class.
    
car1 = Car("Toyota", "Camry", 2022)
car2 = Car("Ford", "Mustang", 2023)

car1.accelerate()  
car2.accelerate()  

print(f"{car1.make} {car1.model} is traveling at {car1.speed} mph.")
print(f"{car2.make} {car2.model} is traveling at {car2.speed} mph.")

Que 2:
        Encapsulation
        Inheritance
        Polymorphism
        Abstraction
        
Que 3:
        The __init__() function, also known as the constructor method, is a special method in Python used to initialize the attributes (properties) of an object when it is created from a class. It is called automatically when an object of the class is instantiated
        
        class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def introduce(self):
        print(f"Hello, my name is {self.name}, and I am {self.age} years old.")

person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

person1.introduce()  # Output: Hello, my name is Alice, and I am 30 years old.
person2.introduce()  # Output: Hello, my name is Bob, and I am 25 years old.

Que 4:
        self is used within classes to refer to the instance of the class. It is the conventional name for the first parameter in methods defined within a class. The use of self serves several essential purposes:
        Accessing Instance Attributes
        Calling Other Instance Methods
        Creating and Managing Instance Objects
        
 Que 5:
         Inheritance is a fundamental concept in object-oriented programming (OOP) that allows a new class (subclass or derived class) to inherit properties and behaviors (attributes and methods) from an existing class (superclass or base class). Inheritance promotes code reusability and the creation of a hierarchy of classes, where a subclass inherits characteristics from a superclass while also having the option to extend or override those characteristics.
         class Animal:
    def speak(self):
        pass

class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"


class A:
    def methodA(self):
        pass

class B:
    def methodB(self):
        pass

class C(A, B):
    def methodC(self):
        pass


class Grandparent:
    def method_grandparent(self):
        pass

class Parent(Grandparent):
    def method_parent(self):
        pass

class Child(Parent):
    def method_child(self):
        pass



